#I will analyze Price Data for the cryptocurrency Bitcoin (BTC) in 2021.
#I have fetched the data from https://finance.yahoo.com/quote/BTC-USD/history.

#Import Libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats
import seaborn as sns

#Let's start by importing BTC data, treating the first column as the index and parsing the dates.

df = pd.read_csv('/Users/davidgomez/Desktop/BTC Python Project Data/BTC-USD_2021_Historical_Price_Data.csv',
                 index_col=0,
                 parse_dates= True
)

df.head()

#Once the Database has been successfully imported and the Dataframe (df) has been created,
#let's now explore the Dataframe.

df.describe() #having a look at the basic statistics of the DataFrame.
df.shape
df.info()

#The Dataframe contains 366 rows and 6 columns. The info() function appears to indicate there are 4 missing
#values. Let's verify this.

df.isnull().values.any() #There are null values. Let's now identify these.

df.plot() #There seems to be a discontinuity of values in mid-January. Let's zoom in those dates.

df.loc['2021-01-01' : '2021-02-01'].plot(figsize=(16,9)) #it's clear now that there is missing data
#between January,15 and January,19. Let's handle this.


#I could either choose to drop the rows with missing values or to fill them with. In this case,
#we could benefit from those values. We could presume that the values stayed the same and use previous values
#to fill the blanks forward. I will also make the changes permanent.

df.loc['2021-01-15': '2021-01-19'] = df.loc['2021-01-15': '2021-01-19'].fillna(method='ffill')

df.plot(figsize=(16,9)) #no discontinuities of values observed. The nulls have been handled.

#We will now drop the 'Open', 'Close, 'High', and 'Low' columns
#and will take the 'Adj Close' column as representative of the daily price of BTC.

df = df.drop(columns=['Open','High','Low','Close'])
df.head()

#Let's now rename the 'Adj Close' as 'Price' to make it more intuitive.

df = df.rename(columns={'Adj Close':'Price'})
df.head()

#Let's now analyze the central tendency of the BTC Price.

round(df['Price'].mean(),2)     #Calculate the mean, rounded to two decimals.
round(df['Price'].median(),2)   #Calculate the median, rounded to two decimals.

#Both the mean (47,444.81) and the median (47,747.42) are close together. Thus, we can conclude that the data
#follows a somewhat symmetrical distribution in 2021.

df['Price'].plot(kind= 'hist', bins=150, figsize=(16,9)) #Visualizing the distribution with a histogram.

#Visualizing a histogram using Seaborn's distplot, that plots a histogram,
#a KDE and a rugplot.

fig, ax = plt.subplots(figsize = (16,9))
sns.displot(df['Price'], rug=True, kde=True, ax=ax)

#Visualizing a Scatterplot using Seaborn's regplot to see the relationship between the Price and Volume of BTC.

fig, ax = plt.subplots(figsize = (16,9))
sns.regplot(x='Price', y='Volume', data=df, ax=ax)

#There does not seem to be a relationship between the two variables. Let's calculate the Pearson's
#Correlation Coefficient to verify this.

r, p = scipy.stats.pearsonr(df['Price'],df['Volume'])
print(r)

#After obtaining a value of r of -0.00056, we can conclude that there is a very weak, almost inexistent,
#linear relationship between the Price and Volume of BTC.

#Analytical Analysis of invalid values.

#I will analyze those values that seem invalid. I will use IQRs (InterQuartile Range), as this is not
#so sensitive to outliers.

iqr = df['Price'].quantile(.75) - df['Price'].quantile(.25)
iqr #IQR equals 17,837.61 USD.

#Let's now calculate the Z scores, both above and below the mean.

upper_limit = df['Price'].mean() + 2 * iqr
lower_limit = df['Price'].mean() - 2 * iqr
print(upper_limit)
print(lower_limit)

#Let's plot the lower and upper limit as vertical lines in the Seaborn chart.

fig, ax = plt.subplots(figsize=(15, 7))
sns.distplot(df['Price'], ax=ax)
ax.axvline(lower_limit, color='red')
ax.axvline(upper_limit, color='red')

#According to the plot, anything above 83,120 USD is considered an invalid value.




